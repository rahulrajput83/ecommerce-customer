import Head from 'next/head'
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import Navbar from '../../components/Navbar'
import ErrorComponent from '@/components/ErrorComponent'
import Card from '@/components/Card';
import { addToCart } from '@/Functions/addToCart';
import { getRequest } from '@/Functions/Requests';
const CryptoJS = require('crypto-js')

export default function product() {
    const router = useRouter();
    const [data, setData] = useState();
    const [loading, setLoading] = useState(true)
    const [getError, setGetError] = useState(false)
    const [status, setStatus] = useState('')
    const [cartData, setCartData] = useState([])



    useEffect(() => {
        const getProduct = async () => {
            if (router.isReady) {
                try {
                    setLoading(true)
                    const { id } = router.query;
                    fetch(`/api/sellerDetail/${id}`)
                        .then(val => val.json())
                        .then((val) => {
                            if (val.message === 'Success' && val.value) {
                                let bytes = CryptoJS.AES.decrypt(val.value, process.env.JWT);
                                let data = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
                                if (data) {
                                    let { displayName, fullName, address } = data.user;
                                    let bytesFullName = fullName ? CryptoJS.AES.decrypt(fullName, process.env.JWT) : '';
                                    data.user.fullName = bytesFullName ? bytesFullName.toString(CryptoJS.enc.Utf8) : '';
                                    let bytesDisplay = displayName ? CryptoJS.AES.decrypt(displayName, process.env.JWT) : '';
                                    data.user.displayName = bytesDisplay ? bytesDisplay.toString(CryptoJS.enc.Utf8) : '';
                                    let bytesAddress = address ? CryptoJS.AES.decrypt(address, process.env.JWT) : '';
                                    data.user.address = bytesAddress ? bytesAddress.toString(CryptoJS.enc.Utf8) : '';
                                    setData(data)
                                    setLoading(false)
                                }
                            }
                            else {
                                setGetError(true)
                                setTimeout(() => {
                                    setGetError(false)
                                }, 5000)
                            }
                        })
                        .catch((err) => {
                            setGetError(true)
                            setTimeout(() => {
                                setGetError(false)
                            }, 6000)
                        })
                } catch (error) {
                    setGetError(true)
                    setTimeout(() => {
                        setGetError(false)
                    }, 6000)
                }
            }
        }
        getProduct();
    }, [router.isReady])

    const handleAddToCart = async (item) => {
        try {
            setStatus('Adding...')
            setTimeout(() => {
                setStatus('')
            }, 5000)
            const response = await addToCart(item);
            if (response.message && response.message.includes('Error')) {
                setGetError(true)
                setTimeout(() => {
                    setGetError(false)
                }, 3000)
            }
            else {
                if (response.message && response.message === 'Unauthorized') {
                    setStatus("Please Login.")
                    router.push(Logout())
                    setTimeout(() => {
                        setStatus('')
                    }, 5000)
                }
                else {
                    setStatus(response.message)
                    setTimeout(() => {
                        setStatus('')
                    }, 5000)
                    getCart();
                }

            }
        } catch (error) {
            console.log(error)
            setGetError(true)
            setTimeout(() => {
                setGetError(false)
            }, 3000)
        }
        return;
    }

    const getCart = async () => {
        const response = await getRequest('/api/findAllCart')
        setCartData(response || [])
    }


    return (
        <>
            <Head>
                <title>{data && data.user && data.user.displayName ? data.user.displayName : 'Seller'}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="favicon.ico" />
            </Head>

            <main className='w-100 flex flex-col'>
                <Navbar cartData={cartData} />
                {status && <div className="p-4 fixed right-1 font-medium top-1 z-50 w-10/12 md:w-3/12 mb-4 text-sm text-red-800 rounded-lg bg-red-50" role="alert">
                    {status}
                </div>}
                {getError && <ErrorComponent />}
                <div className='w-full flex flex-col gap-2 px-2 md:px-10 pb-10 mt-20 md:mt-20'>
                    {!loading
                        ?
                        <div className='w-full grid grid-cols-1 md:grid-cols-4 gap-6'>
                            <div className='md:z-30 w-full relative flex flex-col'>
                                <div className='shadow-md bg-white rounded p-4 md:sticky top-16 w-full flex flex-col justify-center items-center'>
                                    <img src='/7309681.jpg' alt='' className='rounded-full h-24 w-24' />
                                    <span className='mt-4'>{data && data.user && data.user.displayName}</span>
                                    <span className='text-xs'>{data && data.user && data.user.address}</span>
                                </div>
                            </div>
                            <div className='w-full md:col-span-3 flex flex-col gap-2'>
                                <span>Products</span>
                                <div className='w-full grid grid-cols-2 md:grid-cols-3 gap-4'>
                                    {data && data.user && data.user.products && data.user.products.length > 0 ?
                                        data.user.products.map((e, i) => {
                                            return (
                                                <Card handleAddToCart={handleAddToCart} data={e} key={i} />
                                            )
                                        })
                                        :
                                        <span className='w-full text-sm text-center col-span-2 md:col-span-3'>No Product Found</span>}
                                </div>
                            </div>
                        </div>
                        :
                        <div className='w-full animate-pulse grid gap-6 grid-cols-1 md:grid-cols-12'>
                            <div className='md:col-span-3 gap-1 p-2 md:p-4 bg-slate-200 h-52 rounded shadow-lg w-full flex flex-col justify-start items-start'>
                            </div>
                            <div className='md:col-span-3 gap-1 p-2 md:p-4 bg-slate-200 h-72 rounded shadow-lg w-full flex flex-col justify-start items-start'>
                            </div>
                            <div className='md:col-span-3 gap-1 p-2 md:p-4 bg-slate-200 h-72 rounded shadow-lg w-full flex flex-col justify-start items-start'>
                            </div>
                            <div className='md:col-span-3 gap-1 p-2 md:p-4 bg-slate-200 h-72 rounded shadow-lg w-full flex flex-col justify-start items-start'>
                            </div>
                        </div>
                    }
                </div>
            </main>
        </>
    )
}